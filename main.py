from __future__ import unicode_literals
import spotipy
from spotipy.oauth2 import SpotifyClientCredentials
from youtubesearchpython import VideosSearch
import yt_dlp as youtube_dl
import os
import config
import re
from mutagen.mp3 import MP3
from mutagen.id3 import ID3, APIC, TIT2, TPE1, TALB
import requests
from io import BytesIO
from settings_manager import settings

auth_manager = SpotifyClientCredentials(
    client_id=config.SPOTIFY_CLIENT_ID,
    client_secret=config.SPOTIFY_CLIENT_SECRET
)
spotify = spotipy.Spotify(auth_manager=auth_manager)

def detect_platform(url):
    for platform, patterns in config.SUPPORTED_PLATFORMS.items():
        if any(pattern in url for pattern in patterns):
            return platform
    return None

def clean_filename(name):
    """–û—á–∏—â–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –æ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –∏ BYPASS –ø–æ–º–µ—Ç–æ–∫"""
    # –£–¥–∞–ª—è–µ–º BYPASS, bypass –∏ –ø–æ–¥–æ–±–Ω—ã–µ –≤–∞—Ä–∏–∞—Ü–∏–∏
    name = re.sub(r'\s*\(?bypass\)?', '', name, flags=re.IGNORECASE)
    # –ó–∞–º–µ–Ω—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –Ω–∞ –æ–±—ã—á–Ω—ã–µ
    name = name.translate(str.maketrans('ùî∏ùîπ‚ÑÇùîªùîºùîΩùîæ‚ÑçùïÄùïÅùïÇùïÉùïÑ‚ÑïùïÜ‚Ñô‚Ñö‚Ñùùïäùïãùïåùïçùïéùïèùïê‚Ñ§',
                                      'ABCDEFGHIJKLMNOPQRSTUVWXYZ'))
    # –û—á–∏—â–∞–µ–º –æ—Ç –ª–∏—à–Ω–∏—Ö –ø—Ä–æ–±–µ–ª–æ–≤
    name = ' '.join(name.split())
    return name.strip()

def get_tracks_from_collection(url, collection_type):
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ç—Ä–µ–∫–æ–≤ –∏–∑ –ø–ª–µ–π–ª–∏—Å—Ç–∞ –∏–ª–∏ –∞–ª—å–±–æ–º–∞"""
    tracks = []
    
    try:
        if collection_type == 'playlist':
            results = spotify.playlist_tracks(url)
            items = results['items']
            while results['next']:
                results = spotify.next(results)
                items.extend(results['items'])
            
            for item in items:
                try:
                    if not item or not item.get('track'):
                        print(f"–ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç—Ä–µ–∫: –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∞–Ω–Ω—ã–µ")
                        continue
                        
                    track = item['track']
                    if not track.get('name'):
                        print(f"–ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç—Ä–µ–∫: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ")
                        continue
                        
                    # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–º—ë–Ω –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π
                    artists = []
                    if track.get('artists'):
                        for artist in track['artists']:
                            if artist.get('name'):
                                artists.append(artist['name'])
                    
                    artists_str = ", ".join(artists) if artists else "Unknown Artist"
                    
                    # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ URL –æ–±–ª–æ–∂–∫–∏
                    thumbnail_url = None
                    if track.get('album') and track['album'].get('images') and track['album']['images']:
                        thumbnail_url = track['album']['images'][0].get('url')
                    
                    search_query = f"{artists_str} - {track['name']}"
                    
                    tracks.append({
                        'name': track['name'],
                        'performers': artists_str,
                        'thumbnail_url': thumbnail_url,
                        'type': 'track',
                        'search_query': search_query
                    })
                except Exception as track_error:
                    print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç—Ä–µ–∫–∞: {str(track_error)}")
                    continue
        
        elif collection_type == 'album':
            album = spotify.album(url)
            results = spotify.album_tracks(url)
            items = results['items']
            while results['next']:
                results = spotify.next(results)
                items.extend(results['items'])
            
            album_thumbnail = None
            if album.get('images') and album['images']:
                album_thumbnail = album['images'][0].get('url')
            
            for track in items:
                try:
                    if not track.get('name'):
                        print(f"–ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç—Ä–µ–∫: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ")
                        continue
                    
                    # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–º—ë–Ω –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π
                    artists = []
                    if track.get('artists'):
                        for artist in track['artists']:
                            if artist.get('name'):
                                artists.append(artist['name'])
                    
                    artists_str = ", ".join(artists) if artists else "Unknown Artist"
                    search_query = f"{artists_str} - {track['name']}"
                    
                    tracks.append({
                        'name': track['name'],
                        'performers': artists_str,
                        'thumbnail_url': album_thumbnail,
                        'type': 'track',
                        'search_query': search_query
                    })
                except Exception as track_error:
                    print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç—Ä–µ–∫–∞: {str(track_error)}")
                    continue
        
        if not tracks:
            raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç—Ä–µ–∫–∏ –∏–∑ –∫–æ–ª–ª–µ–∫—Ü–∏–∏")
            
        return tracks
        
    except Exception as e:
        raise Exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç—Ä–µ–∫–æ–≤: {str(e)}")

def get_track_info(url, platform):
    if platform == 'spotify':
        try:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –ø–æ URL
            if 'playlist' in url:
                return {'type': 'playlist', 'tracks': get_tracks_from_collection(url, 'playlist')}
            elif 'album' in url:
                return {'type': 'album', 'tracks': get_tracks_from_collection(url, 'album')}
            elif 'episode' in url:
                result = spotify.episode(url)
                performers = result['show']['publisher']
                track_name = clean_filename(result['name'])
                content_type = 'episode'
            else:
                result = spotify.track(url)
                performers = ", ".join(artist["name"] for artist in result["artists"])
                track_name = result['name']
                content_type = 'track'
            
            if content_type in ['track', 'episode']:
                search_query = f"{performers} - {track_name}"
                thumbnail_url = (result['album']['images'][0]['url'] if content_type == 'track' and result['album'].get('images') and result['album']['images']
                            else result['images'][0]['url'] if result.get('images') and result['images']
                            else None)
                
                return {
                    'type': content_type,
                    'name': track_name,
                    'performers': performers,
                    'search_query': search_query,
                    'thumbnail_url': thumbnail_url
                }
        except Exception as e:
            raise Exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: {str(e)}")
    
    return {'type': platform, 'url': url}

def change_download_settings():
    while True:
        print("\n–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏:")
        print(f"1. –°–ø—Ä–∞—à–∏–≤–∞—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫: {'–î–∞' if settings.get('ask_source') else '–ù–µ—Ç'}")
        print(f"2. –ü—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫: {settings.get('preferred_source')}")
        print("3. –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        
        choice = input("–í–∞—à –≤—ã–±–æ—Ä: ")
        
        if choice == "1":
            settings.set('ask_source', not settings.get('ask_source'))
            print("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!")
        
        elif choice == "2":
            print("\n–î–æ—Å—Ç—É–ø–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏:")
            sources = ['youtube', 'soundcloud']
            for i, source in enumerate(sources, 1):
                print(f"{i}. {source}")
            
            try:
                source_choice = int(input("–í—ã–±–µ—Ä–∏—Ç–µ –∏—Å—Ç–æ—á–Ω–∏–∫ (–Ω–æ–º–µ—Ä): "))
                if 1 <= source_choice <= len(sources):
                    settings.set('preferred_source', sources[source_choice-1])
                    print("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!")
                else:
                    print("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä")
            except ValueError:
                print("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä")
        
        elif choice == "3":
            break
        
        else:
            print("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä")

def select_download_source(platform, track_info):
    if not settings.get('ask_source'):
        return settings.get('preferred_source')
    
    if platform == 'spotify':
        print("\n–í—ã–±–µ—Ä–∏—Ç–µ –∏—Å—Ç–æ—á–Ω–∏–∫ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏:")
        sources = ['youtube', 'soundcloud']
        for i, source in enumerate(sources, 1):
            print(f"{i}. {source}")
        
        while True:
            try:
                choice = int(input("–í–∞—à –≤—ã–±–æ—Ä: "))
                if 1 <= choice <= len(sources):
                    return sources[choice-1]
                print("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä")
            except ValueError:
                print("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä")
    
    return platform

def add_metadata(file_path, track_info, thumbnail_url=None):
    try:
        # –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –∑–∞–≥—Ä—É–∂–∞–µ–º ID3 —Ç–µ–≥–∏
        audio = MP3(file_path, ID3=ID3)
        
        # –ï—Å–ª–∏ —Ç–µ–≥–æ–≤ –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º –∏—Ö
        if audio.tags is None:
            audio.add_tags()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
        audio.tags.add(TIT2(encoding=3, text=track_info['name']))  # –Ω–∞–∑–≤–∞–Ω–∏–µ
        audio.tags.add(TPE1(encoding=3, text=track_info['performers']))  # –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å URL –æ–±–ª–æ–∂–∫–∏, –¥–æ–±–∞–≤–ª—è–µ–º –µ—ë
        if thumbnail_url:
            response = requests.get(thumbnail_url)
            if response.status_code == 200:
                audio.tags.add(APIC(
                    encoding=3,
                    mime='image/jpeg',
                    type=3,  # 3 –æ–∑–Ω–∞—á–∞–µ—Ç –æ–±–ª–æ–∂–∫—É
                    desc='Cover',
                    data=response.content
                ))
        
        audio.save()
        print("–ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã!")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö: {str(e)}")

def download_collection(tracks, collection_type):
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –≤—Å–µ —Ç—Ä–µ–∫–∏ –∏–∑ –ø–ª–µ–π–ª–∏—Å—Ç–∞ –∏–ª–∏ –∞–ª—å–±–æ–º–∞"""
    total = len(tracks)
    success = 0
    failed = 0
    
    print(f"\n–ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É {collection_type}–∞ ({total} —Ç—Ä–µ–∫–æ–≤)")
    
    # –°–ø—Ä–∞—à–∏–≤–∞–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫ –æ–¥–∏–Ω —Ä–∞–∑ –¥–ª—è –≤—Å–µ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏
    source = select_download_source('spotify', None) if settings.get('ask_source') else settings.get('preferred_source')
    
    for i, track in enumerate(tracks, 1):
        try:
            print(f"\n–ó–∞–≥—Ä—É–∑–∫–∞ —Ç—Ä–µ–∫–∞ {i}/{total}")
            search_query = f"{track['performers']} - {track['name']}"
            track_info = {
                'name': track['name'],
                'performers': track['performers'],
                'search_query': search_query,
                'thumbnail_url': track.get('thumbnail_url'),
                'type': 'track'
            }
            # –î–æ–±–∞–≤–ª—è–µ–º —Ç—Ä–µ—Ç–∏–π –∞—Ä–≥—É–º–µ–Ω—Ç source
            download_track(track_info, 'spotify', source)
            success += 1
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ç—Ä–µ–∫–∞ {track['name']}: {str(e)}")
            failed += 1
    
    print(f"\n–ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    print(f"–£—Å–ø–µ—à–Ω–æ: {success}")
    print(f"–° –æ—à–∏–±–∫–∞–º–∏: {failed}")

def download_track(track_info, platform, preset_source=None):
    try:
        if track_info['type'] in ['playlist', 'album']:
            download_collection(track_info['tracks'], track_info['type'])
            return
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
        source = preset_source or select_download_source(platform, track_info)
        
        if platform == 'spotify':
            video_url = search_track(track_info['search_query'])
            name = f"{track_info['performers']} - {track_info['name']}"
            thumbnail_url = track_info.get('thumbnail_url')
        else:
            video_url = track_info['url']
            name = "%(title)s"
            thumbnail_url = None

        print(f"–ó–∞–≥—Ä—É–∑–∫–∞: {name if platform == 'spotify' else video_url}")
        
        base_path = f'{config.DOWNLOAD_DIR}/{name}'
        temp_path = f'{base_path}.{config.AUDIO_FORMAT}'
        final_path = f'{base_path}.{config.AUDIO_FORMAT}.{config.AUDIO_FORMAT}'
        
        ydl_opts = {
            'format': 'bestaudio/best',
            'postprocessors': [{
                'key': 'FFmpegExtractAudio',
                'preferredcodec': config.AUDIO_FORMAT,
                'preferredquality': config.AUDIO_QUALITY,
            }],
            'outtmpl': temp_path
        }
        
        download(video_url, ydl_opts)
        
        if os.path.exists(final_path):
            os.rename(final_path, temp_path)
        
        add_metadata(temp_path, track_info, thumbnail_url)
        
        print("–ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
    except Exception as e:
        print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ: {str(e)}")
        raise

def search_track(query):
    """–ü–æ–∏—Å–∫ —Ç—Ä–µ–∫–∞ –Ω–∞ YouTube"""
    try:
        ydl_opts = {
            'quiet': True,
            'no_warnings': True,
            'extract_flat': True,
            'default_search': 'ytsearch1'  # –ò—â–µ–º —Ç–æ–ª—å–∫–æ 1 –≤–∏–¥–µ–æ
        }
        
        with youtube_dl.YoutubeDL(ydl_opts) as ydl:
            result = ydl.extract_info(f"ytsearch:{query}", download=False)
            if result and result.get('entries'):
                return result['entries'][0]['url']
        return None
    except Exception as e:
        raise Exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –≤–∏–¥–µ–æ: {str(e)}")

def parse_choice(choice, search_results):
    try:
        # –†–∞–∑–±–∏—Ä–∞–µ–º –≤–≤–æ–¥ –Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º—É –∏ –Ω–æ–º–µ—Ä
        if choice.startswith('sp'):
            platform_code = 'sp'
            number = int(choice[2:])
        elif choice.startswith('so'):
            platform_code = 'so'
            number = int(choice[2:])
        elif choice.startswith('y'):
            platform_code = 'y'
            number = int(choice[1:])
        elif choice.startswith('d'):
            platform_code = 'd'
            number = int(choice[1:])
        else:
            return None, None
        
        # –°–æ–ø–æ—Å—Ç–∞–≤–ª—è–µ–º –∫–æ–¥—ã —Å –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞–º–∏
        platform_map = {
            'sp': 'spotify',
            'so': 'soundcloud',
            'y': 'youtube',
            'd': 'deezer'
        }
        
        platform = platform_map.get(platform_code)
        if not platform:
            return None, None
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –Ω–æ–º–µ—Ä–∞
        if number < 1 or number > len(search_results.get(platform, [])):
            return None, None
        
        return platform, number - 1
    except:
        return None, None

def search_and_show_tracks():
    query = input("–í–≤–µ–¥–∏—Ç–µ –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å: ")
    print("\n–ü–æ–∏—Å–∫...")
    
    search_results = {}
    
    # –ü–æ–∏—Å–∫ –≤ YouTube
    try:
        ydl_opts = {
            'quiet': True,
            'no_warnings': True,
            'extract_flat': True,
            'default_search': 'ytsearch5'  # –ò—â–µ–º 5 –≤–∏–¥–µ–æ
        }
        
        with youtube_dl.YoutubeDL(ydl_opts) as ydl:
            results = ydl.extract_info(f"ytsearch:{query}", download=False)
            if results and results.get('entries'):
                search_results['youtube'] = results['entries']
                print("\nYouTube (y1-y5):")
                for i, video in enumerate(results['entries'], 1):
                    print(f"y{i}. {video['title']}")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –≤ YouTube: {str(e)}")
    
    # –ü–æ–∏—Å–∫ –≤ Spotify
    try:
        spotify_results = spotify.search(q=query, limit=5, type='track')
        tracks = spotify_results['tracks']['items']
        search_results['spotify'] = tracks
        print("\nSpotify (sp1-sp5):")
        for i, track in enumerate(tracks, 1):
            artists = ", ".join([artist['name'] for artist in track['artists']])
            print(f"sp{i}. {artists} - {track['name']}")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –≤ Spotify: {str(e)}")
    
    print("\n–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ —Ç—Ä–µ–∫–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: sp3, y2)")
    print("–∏–ª–∏ 'q' –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é")
    
    while True:
        choice = input("–í–∞—à –≤—ã–±–æ—Ä: ").lower()
        
        if choice == 'q':
            return
        
        platform, index = parse_choice(choice, search_results)
        
        if platform is None:
            print("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü—Ä–∏–º–µ—Ä—ã: sp3, y2")
            continue
        
        try:
            if platform == 'spotify':
                track = search_results['spotify'][index]
                track_info = {
                    'name': track['name'],
                    'performers': ", ".join([artist['name'] for artist in track['artists']]),
                    'search_query': f"{', '.join([artist['name'] for artist in track['artists']])} - {track['name']}",
                    'type': 'track',
                    'thumbnail_url': track['album']['images'][0]['url'] if track['album']['images'] else None
                }
            elif platform == 'youtube':
                track_info = {
                    'url': search_results['youtube'][index]['url'],
                    'type': platform
                }
            
            download_track(track_info, platform, None)
            break
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç—Ä–µ–∫–∞: {str(e)}")
            continue

def download(video_url, ydl_opts):
    try:
        with youtube_dl.YoutubeDL(ydl_opts) as ydl:
            ydl.download([video_url])
    except Exception as e:
        raise Exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ: {str(e)}")

def main():
    try:
        os.makedirs(config.DOWNLOAD_DIR, exist_ok=True)
        
        while True:
            print("\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:")
            print("1. –°–∫–∞—á–∞—Ç—å –ø–æ —Å—Å—ã–ª–∫–µ")
            print("2. –ü–æ–∏—Å–∫ –∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ")
            print("3. –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏")
            print("4. –í—ã—Ö–æ–¥")
            
            choice = input("–í–∞—à –≤—ã–±–æ—Ä: ")
            
            if choice == "1":
                url = input("–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É (—Ç—Ä–µ–∫/–∞–ª—å–±–æ–º/–ø–ª–µ–π–ª–∏—Å—Ç): ")
                platform = detect_platform(url)
                
                if platform:
                    track_info = get_track_info(url, platform)
                    if track_info['type'] in ['playlist', 'album']:
                        download_collection(track_info['tracks'], track_info['type'])
                    else:
                        download_track(track_info, platform, None)
                else:
                    print("–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–∞—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ –∏–ª–∏ –Ω–µ–≤–µ—Ä–Ω–∞—è —Å—Å—ã–ª–∫–∞")
            
            elif choice == "2":
                search_and_show_tracks()
            
            elif choice == "3":
                change_download_settings()
            
            elif choice == "4":
                break
            
            else:
                print("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä")
                
    except Exception as e:
        print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")

if __name__ == "__main__":
    main()